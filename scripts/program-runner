#!/usr/bin/env perl
use strict;
use warnings;

use File::Spec::Functions qw(catfile);
use File::Temp;
use File::Copy;
use MIME::Base64;
use IO::Uncompress::Gunzip qw(gunzip $GunzipError) ;

setpgrp;

# We trap control-c (and others) so we can clean up when that happens.
$SIG{'ABRT'} = 'interruptHandler';
$SIG{'TERM'} = 'interruptHandler';
$SIG{'QUIT'} = 'interruptHandler';
$SIG{'SEGV'} = 'interruptHandler';
$SIG{'HUP' } = 'interruptHandler';
$SIG{'TRAP'} = 'interruptHandler';
$SIG{'STOP'} = 'interruptHandler';
$SIG{'INT'} = 'interruptHandler'; # handle control-c 

# Set heap size of krun
$ENV{K_OPTS} = '-Xmx2048m';

# These are compile-time settings and are set by the compile script using this
# file as a template.
my $SCRIPTS_DIR = "EXTERN_SCRIPTS_DIR";
my $PROGRAM_NAME = "EXTERN_IDENTIFIER";

my $EXEC_DEF = catfile($SCRIPTS_DIR, "c11-kompiled");
my $EXEC_ND_DEF = catfile($SCRIPTS_DIR, "c11-nd-kompiled");
my $EXEC_ND_THREAD_DEF = catfile($SCRIPTS_DIR, "c11-nd-thread-kompiled");

my $KRUN = "krun";

my @temporaryFiles = ();

exit main();

sub main {
      my $fileInput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-in-XXXXXXXXXXX', 
            SUFFIX => '.bin', 
            UNLINK => 0);
      my $fileOutput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-out-XXXXXXXXXXX', 
            SUFFIX => '.txt', 
            UNLINK => 0);

      push(@temporaryFiles, $fileInput);
      push(@temporaryFiles, $fileOutput);

      # The function "linkedProgram()" is attached to the bottom of this script
      # by kcc.
      binmode($fileInput, ':raw');

      my $gzippedConf = decode_base64(linkedProgram());
      my $gunzippedConf;

      gunzip \$gzippedConf => \$gunzippedConf
            or die "gunzip failed: $GunzipError\n";

      print $fileInput $gunzippedConf;

      my $argc = $#ARGV + 2;
      my $argv = join('  ', map {qq|ListItem(\\"$_\\")|} ($0, @ARGV));

      my %krun_args = (
                  '--output' => 'pretty', 
                  '--output-file' => $fileOutput, 
                  '-d' => $EXEC_DEF,
                  '--io' => 'on', 
                  "-cARGC=$argc" => '',
                  "-cARGV=\"($argv .List)\"" => '',
                  '--parser "kast --parser binary"' => $fileInput
                  );

      my @options = ();

      if (defined $ENV{HELP}) {
            print "Here are some configuration variables you can set to affect how this program is run:\n";
            print "DEBUG --- runs krun with the --debug flag.\n";
            print "SEARCH --- searches for all possible behaviors instead of interpreting.\n";
            print "THREADSEARCH --- searches for all possible behaviors related to concurrency instead of interpreting.\n";
            print "PROFILE --- performs semantic profiling using this program.\n";
            print "GRAPH --- to be used with SEARCH=1; generates a graph of the state space.\n";
            print "TRACE --- runs krun with the --trace flag.\n";
            print "DUMPALL --- leaves all the intermediate files in the current directory.\n";
            print "LOGIO --- tell the IO server to create logs.\n";
            print "LTLMC --- LTL model checking.\n";
            print "VERBOSE --- verbose output.\n";
            print "E.g., DEBUG=1 $0\n";
            print "\n";
            print "This message was displayed because the variable HELP was set.  Use HELP=1 $0 to turn off.\n";
            return 1;
      }

      if (defined $ENV{PROFILE} && defined $ENV{TRACE}) {
            print STDERR "Error: Cannot use both PROFILE and TRACE at the same time.\n";
            return 1;
      }

      # Set the arguments to krun based on the value of environment variables.
      if (defined $ENV{PROFILE}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--profile'} = '';
      }

      if (defined $ENV{TRACE}) {
            $krun_args{'--trace'} = '';
      }

      if (defined $ENV{LOGIO}) {
            $krun_args{'--log-io'} = 'on';
      }

      if (defined $ENV{DEBUG}) {
            $krun_args{'--debug'} = '';
      }

      if (defined $ENV{VERBOSE}) {
            $krun_args{'--verbose'} = '';
      }

      if (defined $ENV{SEARCH}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic expression sequencing)\n";
      }

      if (defined $ENV{THREADSEARCH}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_THREAD_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic thread interleaving)\n";
      }

      if (defined $ENV{LTLMC}) {
            $krun_args{'--ltlmc'} = $ENV{LTLMC};
            $krun_args{'-d'} = $EXEC_ND_DEF;
            $krun_args{'--output'} = 'pretty';
            push @options, 'NOIO';
            delete $krun_args{'--output-file'};
            print 'LTL model checking... ';
            print "(with non-deterministic expression sequencing)\n";
      }

      @options = map {"SetItem($_)"} @options;
      push @options, ".Set";
      $krun_args{'-cOPTIONS="(' . (join ' ', @options) . ')"'} = '';

      # Execute krun with the arguments in (flattened) %krun_args.
      my $cmd = "$KRUN " . (join ' ', (grep {$_} %krun_args));
      print $cmd . "\n" if defined $ENV{VERBOSE};
      system($cmd);

      # Print errors and/or results and exit.
      if (defined $ENV{PROFILE}) {
            my $profileDB = 'kccProfileDB.sqlite';
            print "Generating profile database $profileDB...\n";
            if (! -e $profileDB) {
                  copy(catfile($SCRIPTS_DIR, "kccProfileDB.calibration.sqlite"), 
                              $profileDB);
            }
            my $profileWrapper = catfile($SCRIPTS_DIR, 'analyzeProfile.pl');
            `perl $profileWrapper $fileOutput $PROGRAM_NAME`;
            return 0;
      } 

      if (defined $ENV{SEARCH} || defined $ENV{THREADSEARCH}) {
            my $graphOutputFile = "kcc-search-results.dot";

            print "Generated $fileOutput\n" if defined $ENV{VERBOSE};
            print "Examining the output...\n" if defined $ENV{VERBOSE};
            my $graphOutput = graphSearch($graphOutputFile, $fileOutput);
            print "$graphOutput\n";
            print "Generated $graphOutputFile.\n";

            if (defined $ENV{GRAPH}) {
                  print "Generating graph...\n";
                  system("dot -Tps2 $graphOutputFile > kcc-search-results.ps") == 0 
                        or die "Running dot failed: $?\n";
                  print "Generated kcc-search-results.ps.\n";
                  system("ps2pdf kcc-search-results.ps kcc-search-results.pdf") == 0 
                        or die "Running ps2pdf failed: $?\n";
                  print "Generated kcc-search-results.pdf\n";
            }
            return 0;
      } 

      if (defined $ENV{LTLMC} | defined $ENV{DEBUG}) {
            return 0;
      }

      return processResult($fileOutput, defined $ENV{VERBOSE});
}

sub parseRawResultLine {
      my ($parsed) = (@_);

      /< k > (.*) <\/ k >/ && do {
            $parsed->{finalComp} = $1;
      };

      /< error-cell > # "(.*)"\(\.KList\) <\/ error-cell >/ && do {
            $parsed->{haveError} = 1;
            my $output = $1;
            $output =~ s/\%/\%\%/g;
            $output =~ s/`/\\`/g;
            $output =~ s/\\\\/\\\\\\\\/g;
            $parsed->{errorMsg} = substr(`printf "x$output"`, 1);
      };

      /< curr-function > 'Identifier\(# "(.*)"\(\.KList\)\) <\/ curr-function >/ && do {
            $parsed->{errorFunc} = $1;
      };

      /< curr-program-loc > 'CabsLoc\(# "(.*)"\(\.KList\),,# (\d+).*<\/ curr-program-loc >/ && do {
            $parsed->{errorFile} = $1;
            $parsed->{errorLine} = $2;
      };

      /< final-computation > (.*) <\/ final-computation >/ && do {
            $parsed->{finalComp} = $1;
      };

      /< computation > (.*) <\/ computation >/ && do {
            $parsed->{finalCompGoto} = $1;
      };

      /< type > (.*) <\/ type >/ && do {
            $parsed->{finalCompType} = $1;
      };

      /< output > #buffer\(# "(.*)"\(\.KList\)\) <\/ output >/ && do {
            $parsed->{output} = $1;
      };

      /< result-value > 'tv\(# (-?\d+)\(\.KList\),,'t\(Set2KLabel \.Set\(\.KList\),,'int\(\.KList\)\)\) <\/ result-value >/ && do {
            $parsed->{exitCode} = $1;
      };
}

# TODO(chathhorn): We have two functions here because of the newlines -- the
# regexes below match against the whole file as opposed to a line at a time.
sub parseResult {
      my ($parsed) = (@_);

      /<k>(.*?)<\/k>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<error-cell>\s*"(.*)"\s*<\/error-cell>/ && do {
            $parsed->{haveError} = 1;
            my $output = $1;
            $output =~ s/\%/\%\%/g;
            $output =~ s/`/\\`/g;
            $output =~ s/\\\\/\\\\\\\\/g;
            $parsed->{errorMsg} = substr(`printf "x$output"`, 1);
      };

      /<curr-function>\s*(Identifier \( "(.*?)" \)|(file-scope))\s*<\/curr-function>/ && do {
            $parsed->{errorFunc} = $2;
      };

      /<curr-program-loc>\s*CabsLoc\s*\(\s*"(.*)"\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*<\/curr-program-loc>/ && do {
            $parsed->{errorFile} = $1;
            $parsed->{errorLine} = $2;
      };

      /<final-computation>(.*?)<\/final-computation>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<computation>(.*?)<\/computation>/s && do {
            $parsed->{finalCompGoto} = $1;
      };

      /<type>(.*?)<\/type>/s && do {
            $parsed->{finalCompType} = $1;
      };

      /<output>\s*#buffer\s*\(\s*"(.*)"\s*\)\s*<\/output>/ && do {
            $parsed->{output} = $1;
      };

      /<result-value>\s*tv\s*\(\s*(-?\d+)\s*,\s*t\s*\(\s*\.Set\s*,\s*int\s*\)\s*\)\s*<\/result-value>/ && do {
            $parsed->{exitCode} = $1;
      };

      /<result-value>\s*tv\s*\(\s*NullPointer\s*,\s*t\s*\(\s*\.Set\s*,\s*int\s*\)\s*\)\s*<\/result-value>/ && do {
            $parsed->{exitCode} = 0;
      };
}

sub unindent {
      my ($str) = (@_);

      my @lines = split "\n", $str;

      for (@lines) {
            s/^\s+//;
      }

      return join "\n", @lines;
}

sub processResult {
      my ($fileOutput, $verbose) = (@_);
      my %parsed;

      open(OUT, "<$fileOutput");
      local $/;
      local $_ = <OUT>;
      print if $verbose;
      parseResult(\%parsed);

      if (defined $parsed{finalComp} || defined $parsed{finalCompType} 
                  || defined $parsed{errorMsg} || !defined $parsed{exitCode}) {
            print "\n=============================================================\n";
            print "ERROR! KCC encountered an error while executing this program.\n";

            if (defined $parsed{errorMsg}) {
                  print "=============================================================\n";
                  print "$parsed{errorMsg}\n";
            }

            print "=============================================================\n";
            print "File: $parsed{errorFile}\n" if defined $parsed{errorFile};
            print "Function: $parsed{errorFunc}\n" if defined $parsed{errorFunc};
            print "Line: $parsed{errorLine}\n" if defined $parsed{errorLine};

            if (defined $parsed{finalComp}) {
                  print "=============================================================\n";
                  print "Final Computation:\n";
                  print unindent(substr($parsed{finalComp}, 0, 1000));
                  print "\n";
            }

            if (defined $parsed{finalCompGoto}) {
                  print "=============================================================\n";
                  print "Final Goto Map Computation:\n";
                  print unindent(substr($parsed{finalCompGoto}, 0, 1000));
                  print "\n";
            }

            if (defined $parsed{finalCompType}) {
                  print "=============================================================\n";
                  print "Final Type Computation:\n";
                  print unindent(substr($parsed{finalCompType}, 0, 1000));
                  print "\n";
            }
      }
      return $parsed{exitCode} if defined $parsed{exitCode};
      return 1;
}

sub graphSearch {
      require GraphViz;

      my %states = (); # stateId => stateLabel
            my %arcs = (); # startArcId => endArcId => arcLabel
            my %errorStates = (); # stateId => errorKind
            my %goodFinal = (); # stateId => ""

            my ($outFilename, $inFilename) = (@_);
      my $retval = "";

      my $g = GraphViz->new();

# Literal braces, vertical bars and angle brackets must be escaped.

      my $state = "start";
      my $currentStateNumber;
      my $currentStateDestination;
      my $currentState = "";
      my $currentRule = "";
      my $currentRuleName;
      my @currentArc;

      my $seenMain = 0;

      my @solutions;

      open(IN, "<$inFilename");

      for (<IN>) {
            chomp;

            # handle start state
            if ($state eq "start") {
                  /^Solution (\d+) / && do {
                        $state = "solution";
                  };

                  /^No solution\./ && do {
                        $state = "state";
                  };
            }

            if ($state eq "solution") {
                  /^Solution (\d+) / && do {
                        my $numSolutions = $1;
                        push(@solutions, {});
                        $solutions[-1]->{'num'} = $numSolutions;
                  };

                  parseRawResultLine($solutions[-1]);

                  # keep reading (and throwing away) until we hit a state
                  /^state (\d+)/ && do {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                  };

                  next;
            }

            # handle state state
            if ($state eq "state") {
                  # keep reading until we hit an arc
                  if (/^arc (\d+) ===> state (\d+) \((c?rl) /) {
                        $state = "arc";
                        # meant to continue to next case
                  } elsif (/^state (\d+)/) {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                        next;
                  } else {
                        $currentState .= $_;
                        /"stdout"\(\.KList\) \|-> # "(.*)"\(\.KList\)/ && do {
                              my $currentOutput = $1;
                              $states{$currentStateNumber} = $currentOutput;
                        };

                        /< output > #buffer\(# "(.*)"\(\.KList\)\) <\/ output >/ && do {
                              my $currentOutput = $1;
                              $goodFinal{$currentStateNumber} = "";
                              $states{$currentStateNumber} = $currentOutput;
                        };

                        /< error-cell > (.*) <\/ error-cell >/ && do {
                              my $currentOutput = $1;
                              $errorStates{$currentStateNumber} = "";
                        };
                        next;
                  }
            }

            # handle arc state
            if ($state eq "arc") {
                  # keep reading until we hit a state or arc
                  if (/^state (\d+)/) {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                  } elsif (/^arc (\d+) ===> state (\d+) \((c?rl) /) {
                        my $arcNumber = $1;
                        $currentStateDestination = $2;
                        $currentRule = $3;
                        if ($seenMain) {
                              $arcs{$currentStateNumber}{$currentStateDestination} = "";
                        }
                        $state = "arc";
                        $currentRuleName = "";
                  } else {
                        $currentRule .= $_;

                        /label ([\w-]+).*\] \.\)$/ && do {
                              $currentRuleName = $1;
                              if ($currentRuleName eq "call-main") {
                                    %states = ();
                                    $seenMain = 1; 
                              }
                              if ($seenMain) {
                                    $arcs{$currentStateNumber}{$currentStateDestination} = $currentRuleName;
                              }
                        };

                        /metadata .*heating/ && do {
                              if (/freezer\("\(([^\)]+)\)\./) {
                                    $currentRuleName = $1;
                        }
                        $currentRuleName .= ' heat';
                        if ($seenMain) {
                              $arcs{$currentStateNumber}{$currentStateDestination} = $currentRuleName;
                        }
                        };
                  }
                  next;
            }
      }

      for my $node (keys %states) {
            my $attribs = getAttribs($node, \%errorStates, \%goodFinal);
            $attribs->{'label'} = "$node\n${states{$node}}";
            $g->add_node($node, %$attribs);
      }

      for my $from (keys %arcs) {
            for my $to (keys %{$arcs{$from}}) {
                  $g->add_edge($from => $to, label => $arcs{$from}{$to});
            }
      }

      open(DOTOUTPUT, ">$outFilename");
      print DOTOUTPUT $g->as_text;
      close(DOTOUTPUT);

      $retval .= "========================================================================\n";
      $retval .= scalar(@solutions) . " solutions found\n"; 
      for my $solution (@solutions) {

            $retval .= "------------------------------------------------------------------------\n";
            $retval .= "Solution $solution->{'num'}\n";
            if (defined $solution->{'exitCode'}) {
                  $retval .= "Program completed successfully\n"; 
                  $retval .= "Exit code: " . getString($solution->{'exitCode'}) . "\n";
            } else {
                  $retval .= "Program got stuck\n";
                  $retval .= "File: " . getString($solution->{'errorFile'}) . "\n";
                  $retval .= "Line: " . getString($solution->{'errorLine'}) . "\n";
            }
            if (defined $solution->{'errorMsg'}) {
                  $retval .= getString($solution->{'errorMsg'}) . "\n";
            }
            $retval .= "Output:\n" . getString($solution->{'output'}) . "\n";

      }
      $retval .= "========================================================================\n";
      $retval .= scalar(@solutions) . " solutions found\n"; 

      return $retval;
}

sub getAttribs {
      my ($nodeId, $errorStates, $goodFinal) = (@_);
      my $attribs = {};
      if (exists($errorStates->{$nodeId})) {
            $attribs->{"fillcolor"} = "red";
            $attribs->{"style"} = "filled";
      }
      if (exists($goodFinal->{$nodeId})) {
            $attribs->{"fillcolor"} = "green";
            $attribs->{"style"} = "filled";
      }
      return $attribs;
}

sub getString {
      my ($s) = (@_);

      return '' unless defined $s;

      $s =~ s/\%/\%\%/g;
      $s =~ s/\\\\/\\\\\\\\/g;
      return substr(`printf "x$s"`, 1);
}

sub interruptHandler {
      # Call single cleanup point.
      finalCleanup();
      kill 1, -$$;
      # Since we were interrupted, we should exit with a non-zero code.
      exit 1;
}

# This subroutine can be used as a way to ensure we clean up all resources
# whenever we exit. This is going to be mostly temp files. If the program
# terminates for almost any reason, this code will be executed.
sub finalCleanup {
      if (!defined $ENV{DUMPALL}) {
            for (@temporaryFiles) {
                  close $_;
                  unlink;
            }
      }
}

# This block gets run at the end of a normally terminating program, whether it
# simply exits, or dies. We use this to clean up.
END {
      # $? contains the value the program would normally have exited with.
      my $retval = $?;
      # Call single cleanup point.
      finalCleanup();
      exit $retval;
}

# The parsed file contents of the program to execute with krun gets appended.
