#!/usr/bin/env perl
use strict;
use warnings;

use File::Spec::Functions qw(catfile);
use File::Temp;
use File::Copy;
use MIME::Base64;
use IO::Uncompress::Gunzip qw(gunzip $GunzipError) ;

setpgrp;

# We trap control-c (and others) so we can clean up when that happens.
$SIG{'ABRT'} = 'interruptHandler';
$SIG{'TERM'} = 'interruptHandler';
$SIG{'QUIT'} = 'interruptHandler';
$SIG{'SEGV'} = 'interruptHandler';
$SIG{'HUP' } = 'interruptHandler';
$SIG{'TRAP'} = 'interruptHandler';
$SIG{'STOP'} = 'interruptHandler';
$SIG{'INT'} = 'interruptHandler'; # handle control-c 

# Set heap and stack size of krun

my $HEAP_SIZE = "EXTERN_HEAP_SIZE";

$ENV{K_OPTS} = "-Xms64m -Xmx$HEAP_SIZE -Xss32m -XX:+TieredCompilation";

my $SCRIPTS_DIR = "EXTERN_SCRIPTS_DIR";

my $EXEC_DEF = catfile($SCRIPTS_DIR, "c11-kompiled");
my $EXEC_ND_DEF = catfile($SCRIPTS_DIR, "c11-nd-kompiled");
my $EXEC_ND_THREAD_DEF = catfile($SCRIPTS_DIR, "c11-nd-thread-kompiled");

my $KRUN = "krun";

my @temporaryFiles = ();

exit main();

sub main {
      my $fileInput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-in-XXXXXXXXXXX', 
            SUFFIX => '.bin', 
            UNLINK => 0);
      my $fileOutput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-out-XXXXXXXXXXX', 
            SUFFIX => '.txt', 
            UNLINK => 0);

      push(@temporaryFiles, $fileInput);
      push(@temporaryFiles, $fileOutput);

      print $fileInput linkedProgram();

      my $argc = $#ARGV + 2;
      my $argv = join('  ', map {qq|ListItem(\\"$_\\")|} ($0, @ARGV));

      my %krun_args = (
                  '--output' => 'kast', 
                  '-d' => $EXEC_DEF,
                  "-cARGC=$argc" => '',
                  "-cARGV=\"($argv .List)\"" => '',
                  '-w' => 'none',
                  '--parser "cat"' => $fileInput,
                  '--kore' => '',
                  '--exit-code' => "'<result-value> _:Int </result-value>'"
                  );

      my @options = ();

      if (defined $ENV{HELP}) {
            print "Here are some configuration variables you can set to affect how this program is run:\n";
            print "DEBUG --- runs krun with the --debug flag.\n";
            print "GRAPH --- to be used with SEARCH=1; generates a graph of the state space.\n";
            print "TRACE --- runs krun with the --trace flag.\n";
            print "DUMPALL --- leaves all the intermediate files in the current directory.\n";
            print "LOGIO --- tell the IO server to create logs.\n";
            print "LTLMC --- LTL model checking.\n";
            print "VERBOSE --- verbose output.\n";
            print "PROVE=<file> --- enable prover on specification file";
            print "E.g., DEBUG=1 $0\n";
            print "\n";
            print "This message was displayed because the variable HELP was set.  Use HELP=1 $0 to turn off.\n";
            return 1;
      }

      if (defined $ENV{TRACE}) {
            $krun_args{'--trace'} = '';
      }

      if (defined $ENV{LOGIO}) {
            $krun_args{'--log-io'} = 'on';
      }

      if (defined $ENV{DEBUG}) {
            $krun_args{'--debug'} = '';
      }

      if (defined $ENV{VERBOSE}) {
            $krun_args{'--verbose'} = '';
      }

      if (defined nativeLibraries()) {
            $krun_args{'--native-libraries'} = '"' . nativeLibraries() . '"';
      }

      if (defined $ENV{PROVE}) {
            $krun_args{'--prove'} = $ENV{PROVE};
            $krun_args{'--smt_prelude'} = $ENV{SMT_PRELUDE};
      } else {
            $krun_args{'--smt'} = 'none';
            $krun_args{'--output-file'} = $fileOutput;
      }

      if (defined $ENV{SEARCH}) {
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic expression sequencing)\n";
      }

      if (defined $ENV{THREADSEARCH}) {
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_THREAD_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic thread interleaving)\n";
      }

      if (defined $ENV{LTLMC}) {
            $krun_args{'--ltlmc'} = $ENV{LTLMC};
            $krun_args{'-d'} = $EXEC_ND_DEF;
            $krun_args{'--output'} = 'pretty';
            push @options, 'NOIO';
            delete $krun_args{'--output-file'};
            print 'LTL model checking... ';
            print "(with non-deterministic expression sequencing)\n";
      }

      @options = map {"SetItem($_)"} @options;
      push @options, ".Set";
      $krun_args{'-cOPTIONS="(' . (join ' ', @options) . ')"'} = '';

      # Execute krun with the arguments in (flattened) %krun_args.
      my $cmd = "$KRUN " . (join ' ', (grep {$_} %krun_args));
      print $cmd . "\n" if defined $ENV{VERBOSE};
      my $ret = system($cmd) >> 8;

      if (defined $ENV{LTLMC} | defined $ENV{DEBUG}) {
            return 0;
      }

      return processResult($fileOutput, $ret, defined $ENV{VERBOSE});
}

# TODO(chathhorn): We have two functions here because of the newlines -- the
# regexes below match against the whole file as opposed to a line at a time.
sub parseResult {
      my ($parsed) = (@_);

      /<k>(.*?)<\/k>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<error-cell>\s*"(.*)"\s*<\/error-cell>/ && do {
            $parsed->{haveError} = 1;
            my $output = $1;
            $output =~ s/\%/\%\%/g;
            $output =~ s/`/\\`/g;
            $output =~ s/\\\\/\\\\\\\\/g;
            $parsed->{errorMsg} = substr(`printf "x$output"`, 1);
      };

      /<curr-function>\s*(Identifier \( "(.*?)" \)|(file-scope))\s*<\/curr-function>/ && do {
            $parsed->{errorFunc} = $2;
      };

      /<curr-program-loc>\s*CabsLoc\s*\(\s*"(.*)"\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*<\/curr-program-loc>/ && do {
            $parsed->{errorFile} = $1;
            $parsed->{errorLine} = $2;
      };

      /<final-computation>(.*?)<\/final-computation>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<computation>(.*?)<\/computation>/s && do {
            $parsed->{finalCompGoto} = $1;
      };

      /<type>(.*?)<\/type>/s && do {
            $parsed->{finalCompType} = $1;
      };

      /<output>\s*#buffer\s*\(\s*"(.*)"\s*\)\s*<\/output>/ && do {
            $parsed->{output} = $1;
      };

      /<result-value>\s*(-?\d+)\s*<\/result-value>/ && do {
            $parsed->{exitCode} = $1;
      };

      /`<result-value>`\(unknown\(\.KList\)\)/ && do {
            $parsed->{errorMsg} = "Unspecified value returned from main function.";
            $parsed->{exitCode} = 139;
      };

      /<result-value>\s*NullPointer\s*<\/result-value>/ && do {
            $parsed->{exitCode} = 0;
      };
}

sub unindent {
      my ($str) = (@_);

      my @lines = split "\n", $str;

      for (@lines) {
            s/^\s+//;
      }

      return join "\n", @lines;
}

sub processResult {
      my ($fileOutput, $ret, $verbose) = (@_);
      my %parsed;

      open(OUT, "<$fileOutput");
      local $/;
      local $_ = <OUT>;
      print if $verbose;
      parseResult(\%parsed);
      if (defined $parsed{finalComp} || defined $parsed{finalCompType} 
                  || defined $parsed{errorMsg} || $ret) {
            if (defined $parsed{errorMsg}) {
                  print "$parsed{errorMsg}\n";
            }
            if (defined $parsed{exitCode}) {
                  $ret = $parsed{exitCode};
            }
            print "Error: Execution failed.\n";
      }
      return $ret;
}

sub getAttribs {
      my ($nodeId, $errorStates, $goodFinal) = (@_);
      my $attribs = {};
      if (exists($errorStates->{$nodeId})) {
            $attribs->{"fillcolor"} = "red";
            $attribs->{"style"} = "filled";
      }
      if (exists($goodFinal->{$nodeId})) {
            $attribs->{"fillcolor"} = "green";
            $attribs->{"style"} = "filled";
      }
      return $attribs;
}

sub getString {
      my ($s) = (@_);

      return '' unless defined $s;

      $s =~ s/\%/\%\%/g;
      $s =~ s/\\\\/\\\\\\\\/g;
      return substr(`printf "x$s"`, 1);
}

sub interruptHandler {
      # Call single cleanup point.
      finalCleanup();
      kill 1, -$$;
      # Since we were interrupted, we should exit with a non-zero code.
      exit 1;
}

# This subroutine can be used as a way to ensure we clean up all resources
# whenever we exit. This is going to be mostly temp files. If the program
# terminates for almost any reason, this code will be executed.
sub finalCleanup {
      if (!defined $ENV{DUMPALL}) {
            for (@temporaryFiles) {
                  close $_;
                  unlink;
            }
      }
}

# This block gets run at the end of a normally terminating program, whether it
# simply exits, or dies. We use this to clean up.
END {
      # $? contains the value the program would normally have exited with.
      my $retval = $?;
      # Call single cleanup point.
      finalCleanup();
      exit $retval;
}

# The parsed file contents of the program to execute with krun gets appended.
