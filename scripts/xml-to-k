#!/usr/bin/perl
use strict;
use File::Basename;
use Encode;
use MIME::Base64;
use XML::LibXML::Reader;

binmode STDOUT, ":utf8";
binmode STDIN, ":utf8";

# not handling the case of multiple cdatas 
# can use 'erase' to get rid of junk cells

my $STRING = "#";
my $ID = "#";
my $BOOL = '#';
my $RAT = '#';

#########################################################
# you may want to configure things inside this section
use constant KLIST_IDENTITY => ".::KList";
use constant KLIST_SEPARATOR => ", ";
use constant LIST_UNIT => ".List";
use constant LIST_CONCAT => "_List_";

my $ltl = "\n";

# might want to return, say, "'$name"
sub nameToLabel {
	my ($name) = (@_);
	return "`$name`";
}
#########################################################
my %escapeMap = (
	"\007" => '\\a',
	"\010" => '\\b',
	"\011" => '\\t',
	"\012" => '\\n',
	"\013" => '\\v',
	"\014" => '\\f',
	"\015" => '\\r',
	'"' => '\\"',
	'\\' => '\\\\'
);

my $input = join("", <STDIN>);

my %ignoreThese = (	
	'Filename' => 1,
	'Lineno' => 1,
	'Byteno' => 1,
	'OffsetStart' => 1,
	'OffsetEnd' => 1,
	'Ident' => 1,
	'BlockId' => 1,
	'SwitchId' => 1,
	'Lineno' => 1,
	'CompoundLiteralId' => 1,
	'CaseId' => 1,
	'ForId' => 1,
	'SourceCode' => 1,
	'DeclarationType' => 1,
	'Variable' => 1,
	'Paren' => 1,
	'Significand' => 1,
	'Exponent' => 1,
	'TypeQualifier' => 1,
	'StorageSpecifier' => 1,
	'FunctionSpecifier' => 1,
	'Specifiers' => 1,
	'TypeSpecifier' => 1,
	'LocalDefinition' => 1,
	'IntLiteral' => 1,
	'FloatLiteral' => 1,
	'ForClauseDeclaration' => 1,
);

my $reader = new XML::LibXML::Reader(string => $input, huge => 1) 
      or die "cannot create XML::LibXML::Reader object\n";
$reader->read;

if (! ($reader->name eq "TranslationUnit")) {
	die "XML: Expected first entry to be 'TranslationUnit'.";
}
$reader->nextElement('RawData');
# print STDERR "At " . $reader->name . "\n";
my $filename = getRawData($reader);
if ($filename eq ""){
	die "Could not find the filename in the XML\n";
}

# print "---kccMarker\n";
my $filenameTerm = "$filename";
my @args = ();
push (@args, $filenameTerm);

$reader->nextElement;
# print STDERR "At " . $reader->name . "\n";
push (@args, xmlToK($reader));

#$reader->nextElement;
# print STDERR "At " . $reader->name . "\n";
push (@args, xmlToK($reader));

$reader->nextElement('RawData');
# print STDERR "At " . $reader->name . "\n";
my $tu = paren(join(KLIST_SEPARATOR, @args));
print nameToLabel('TranslationUnit') . $tu ;
if ($ltl ne "") {
	print $ltl;
}

sub printStatus {
	my ($reader) = (@_);
	print "visit: " . $reader->name . "\n";
	print "isempty: " . $reader->isEmptyElement . "\n";
	print "value: " . $reader->value . "\n";
	print "type: " . $reader->nodeType . "\n";
}

# this function tries to figure out what kind of a node we're looking at, then
# delegates the conversion to another function
sub xmlToK {
	my ($reader) = (@_);
	#printStatus($reader);
	if (! ($reader->nodeType == XML_READER_TYPE_CDATA)) {
		my $depth = $reader->depth;
		my ($inNextState, $retval) = elementToK($reader);
		if (!$inNextState) {
			$reader->nextElement;
		}
		return $retval;
	}
	return "";
}

sub elementToK {
	my ($reader) = (@_);
	my $inNextState = 0;
	my $label = $reader->name;
	if (exists($ignoreThese{$label})) {
		return ($inNextState, undef);
	}
	my $prefix = "";
	my $suffix = "";
	if ($label eq "RawData") {
		return ($inNextState, rawdataToK($reader));
	}
	if ($label eq 'List') {
		$label = "_::_";  # chathhorn: never used?
	} elsif ($label eq 'NewList') {
		$label = "klist";
		$prefix = '(';
		$suffix = ')';
	} elsif ($label eq 'WStringLiteral') {
		$reader->nextElement;
		$reader->read;
		my $str = escapeWString($reader->value);
		my $ident = "`WStringLiteral`" . paren($str);
		return ($inNextState, $ident);
	} elsif ($label eq 'Variadic') {
		return ($inNextState, "#token(\"true\", \"Bool\")");
	} elsif ($label eq 'NotVariadic') {
		return ($inNextState, "#token(\"false\", \"Bool\")");
	} elsif ($label eq 'U'
            || $label eq 'L'
            || $label eq 'F'
            || $label eq 'LL'
            || $label eq 'UL'
            || $label eq 'ULL') {
            $label = 'Lit' . $label;
      } 
     # else {
     #       my %ltlTrans = (
     #             'LTLAlways' => '`[`]Ltl_',
     #             'LTLEventually' => '<>Ltl_',
     #             'LTLImplies' => '_->Ltl_',
     #             'LTLNot' => '~Ltl_',
     #             'LTLAnd' => '_/\Ltl_',
     #             'LTLOr' => '_\/Ltl_',
     #             'LTLUntil' => '_ULtl_',
     #             'LTLRelease' => '_RLtl_',
     #             'LTLWeakUntil' => '_WLtl_',
     #             'LTLNext' => 'OLtl_',
     #       );

     #       if (defined $ltlTrans{$label}) {
     #             $label = $ltlTrans{$label};
     #       }
     # }

	my @klist = ();
	my $depth = $reader->depth;
	$reader->nextElement;
	if ($reader->depth > $depth) {
		do {
			my $childResult = xmlToK($reader);
			if ($childResult) {
				push (@klist, $childResult);
			}
		} while ($reader->depth > $depth)
	}
	$inNextState = 1;
	
	my $numElements = scalar @klist;
        my $kterm;
        if ($label eq 'klist') {
          return ($inNextState, assocList(@klist));
        } else {
	  if ($numElements == 0) {
		push (@klist, KLIST_IDENTITY);
	  }
          $kterm = paren(join(KLIST_SEPARATOR, @klist));
        }
	
	if ($label eq 'LTLAnnotation') {
		$ltl .= "`LTLAnnotation`(";
		$ltl .= join(KLIST_SEPARATOR, @klist) . ") \n";
		return ($inNextState, ".::K");
	}
	return ($inNextState, nameToLabel($label) . $kterm);
}

sub rawdataToK {
	my ($reader) = (@_);
	my $data = getRawData($reader);
	return $data;
}
sub getRawData {
	my ($reader) = (@_);
	my $sort = $reader->getAttribute('sort');
	my $data = "";
	$reader->read;
	
	if ($sort eq 'String') {
		$data = '#token("' . escapeString('"' . escapeString(decode_base64($reader->value)) . '"') . '", "String")';
	} elsif ($sort eq 'Int') {
		$data = '#token("' . $reader->value . '", "Int")';
	}  elsif ($sort eq 'Float') {
		$data = '#token("' . $reader->value . '", "Float")';
	} else {
		return "unknown raw data";
	}
	return $data;
}


sub escapeSingleCharacter {
	my ($char) = (@_);
	
	if (exists($escapeMap{$char})) {
		return $escapeMap{$char};
	} elsif ($char =~ /[\x20-\x7E]/) {
		return $char;
	} else {
		my $ord = ord($char);
                if($ord < 16) {
                    return '\\' . sprintf("x0%x", $ord);
                } else {
                    return '\\' . sprintf("x%x", $ord);
                }
	}
}

sub escapeString {
	my ($str) = (@_);
	my $decoded = $str;
	my @charArray = split(//, $decoded);
	my @newArray = map(escapeSingleCharacter($_), @charArray) ;
	return join('', @newArray);
}


sub escapeWString {
	my ($str) = (@_);
	my $decoded = decode_base64($str);
	utf8::decode($decoded);
	my @charArray = split(//, $decoded);
      my @str;
	for my $c (@charArray) {
		utf8::encode($c);
		my @charPartArray = split(//, $c);
		my $single = 0;
		for my $cp (@charPartArray) {
			$single = ($single << 8) + ord($cp);
		}
		push @str, "#token(\"$single\", \"Int\")";
	}
        return assocList(@str);
}

sub assocList {
  my @str = (@_);
  if (scalar @str == 0) {
    return "`list`(`" . LIST_UNIT . "`(.::KList))";
  }
  my @wrapped;
  for my $elem ( @str ) {
    push @wrapped, "`ListItem`($elem)";
  }
  return "`list`(`" . LIST_CONCAT . "`"
       . paren(join(", `" . LIST_CONCAT . "`(", @wrapped) . ", `" . LIST_UNIT . "`(.::KList)" . (")" x $#str)) . ")";
}

sub paren {
	my ($str) = (@_);
	return "($str)";
}
