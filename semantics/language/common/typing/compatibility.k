module C-TYPING-COMPATIBILITY-SYNTAX
     imports SET
     syntax Int ::= getAlignas(Type) [function]

     syntax Bool ::= areCompatible(Type, Type) [function]
     syntax Bool ::= areCompatible(UType, UType) [function]
     syntax Type ::= compositeType(Type, Type) [function]
     syntax UType ::= compositeType(UType, UType) [function]
endmodule

module C-TYPING-COMPATIBILITY
     imports C-TYPING-COMPATIBILITY-SYNTAX

     imports C-SYNTAX
     imports C-ALIGNMENT-SYNTAX
     imports C-TYPING-SYNTAX
     imports C-DYNAMIC-SYNTAX
     imports C-SETTINGS-SYNTAX
     imports C-BINDING-SYNTAX

     imports COMPAT-SYNTAX

     /*@ \fromStandard{\source[n1570]{\para{6.2.7}{1}}}{
     Two types have compatible type if their types are the same. Additional
     rules for determining whether two types are compatible are described in
     6.7.2 for type specifiers, in 6.7.3 for type qualifiers, and in 6.7.6 for
     declarators.  Moreover, two structure, union, or enumerated types declared
     in separate translation units are compatible if their tags and members
     satisfy the following requirements: If one is declared with a tag, the
     other shall be declared with the same tag. If both are completed anywhere
     within their respective translation units, then the following additional
     requirements apply: there shall be a one-to-one correspondence between
     their members such that each pair of corresponding members are declared
     with compatible types; if one member of the pair is declared with an
     alignment specifier, the other is declared with an equivalent alignment
     specifier; and if one member of the pair is declared with a name, the
     other is declared with the same name. For two structures, corresponding
     members shall be declared in the same order. For two structures or unions,
     corresponding bit-fields shall have the same widths. For two enumerations,
     corresponding members shall have the same values.

     \source[n1570]{\para{6.7.3}{10}}
     For two qualified types to be compatible, both shall have the identically
     qualified version of a compatible type; the order of type qualifiers
     within a list of specifiers or qualifiers does not affect the specified
     type.
     }*/

     rule areCompatible(T:Type, T':Type) => #areCompat(T, T', .Set)
     rule areCompatible(T:UType, T':UType) => #areCompat(type(T), type(T'), .Set)

     syntax Bool ::= #areCompat(Type, Type, Set) [function]
     rule #areCompat(
               t(Qs::Quals, Mods::Set, T:SimpleBasicType),
               t(Qs, Mods'::Set, T), _)
          => sameAlignas(Mods, Mods')

     // TODO(chathhorn): should be a setting.
     // Each enumerated type shall be compatible with char, a signed integer
     // type, or an unsigned integer type. The choice of type is
     // implementation-defined. (6.7.2.2:4)
     rule #areCompat(
               t(Qs::Quals, Mods::Set, enumType(_)),
               t(Qs, Mods'::Set, T::SimpleType), _)
          => sameAlignas(Mods, Mods')
          requires T ==K cfg:enumAlias
     rule #areCompat(
               t(Qs::Quals, Mods::Set, T::SimpleType),
               t(Qs, Mods'::Set, enumType(_)), _)
          => sameAlignas(Mods, Mods')
          requires T ==K cfg:enumAlias

     // TODO(chathhorn): should also check for equivalent members
     rule #areCompat(
               t(Qs::Quals, Mods::Set, enumType(X::CId)),
               t(Qs, Mods'::Set, enumType(X'::CId)), _)
          => #areTagsCompat(X, X')

     rule #areCompat(
               t(Qs::Quals, Mods::Set, structType(S::StructId)),
               t(Qs, Mods'::Set, structType(S'::StructId)), Cache::Set)
          => sameAlignas(Mods, Mods')
          requires S ==K S'
               orBool kpair(t(Qs, Mods, structType(S)), t(Qs, Mods', structType(S'))) in Cache
               orBool (#areTagsCompat(getTag(S), getTag(S'))
                    andBool #areStructsCompat(getFieldInfo(S), getFieldInfo(S'),
                    Cache SetItem(kpair(t(Qs, Mods, structType(S)), t(Qs, Mods', structType(S'))))))
     rule #areCompat(
               t(Qs::Quals, Mods::Set, unionType(S::StructId)),
               t(Qs, Mods'::Set, unionType(S'::StructId)), Cache::Set)
          => sameAlignas(Mods, Mods')
          requires S ==K S'
               orBool kpair(t(Qs, Mods, unionType(S)), t(Qs, Mods', unionType(S'))) in Cache
               orBool (#areTagsCompat(getTag(S), getTag(S'))
                    andBool #areStructsCompat(getFieldInfo(S), getFieldInfo(S'),
                    Cache SetItem(kpair(t(Qs, Mods, unionType(S)), t(Qs, Mods', unionType(S'))))))

     syntax Bool ::= #areStructsCompat(K, K, Set) [function, memo]
     rule #areStructsCompat(fieldInfo(Fs::List, _, _, _), fieldInfo(Fs'::List, _, _, _), Cache::Set)
          => #areCompatFields(Fs, Fs', Cache) andBool #areBitFieldsCompat(Fs, Fs')
     rule #areStructsCompat(#incomplete, _, _) => true
     rule #areStructsCompat(_, #incomplete, _) => true

     syntax Bool ::= #areTagsCompat(K, K) [function]
     rule #areTagsCompat(C::CId, C::CId) => true
     rule #areTagsCompat(unnamed(_, _), unnamed(_, _)) => true
     rule #areTagsCompat(_, _) => false [owise]

     syntax Bool ::= #areBitFieldsCompat(List, List) [function]
     rule #areBitFieldsCompat(
               ListItem(typedDeclaration(t(_, _, bitfieldType(_::BitfieldFieldType, Size::Int)), _)) Fs::List,
               ListItem(typedDeclaration(t(_, _, bitfieldType(_::BitfieldFieldType, Size::Int)), _)) Fs'::List)
          => #areBitFieldsCompat(Fs, Fs')
     rule #areBitFieldsCompat(
               ListItem(typedDeclaration(T::Type, _)) Fs::List,
               ListItem(typedDeclaration(T'::Type, _)) Fs'::List)
          => #areBitFieldsCompat(Fs, Fs')
     requires notBool isBitfieldType(T) andBool notBool isBitfieldType(T')
     rule #areBitFieldsCompat(.List, .List) => true
     rule #areBitFieldsCompat(_, _) => false [owise]

     // bit fields aren't really types, so they aren't part of type
     // compatibility. According to the standard, they are part of the
     // compatibility of the type of the struct, hence #areBitFieldsCompat
     // above.
     rule #areCompat(
               t(Qs::Quals, Mods::Set, bitfieldType(T::BitfieldFieldType, _)),
               T'::Type, Cache::Set)
          => #areCompat(t(Qs, Mods, T), T', Cache)
     rule #areCompat(
               T'::Type,
               t(Qs::Quals, Mods::Set, bitfieldType(T::BitfieldFieldType, _)), Cache::Set)
          => #areCompat(t(Qs, Mods, T), T', Cache)

     rule #areCompat(
               t(Qs::Quals, Mods::Set, arrayType(T::Type, N::Int)),
               t(Qs, Mods'::Set, arrayType(T'::Type, N)), Cache::Set)
          => sameAlignas(Mods, Mods') andBool #areCompat(T, T', Cache)
     rule #areCompat(
               t(Qs::Quals, Mods::Set, arrayType(T::Type, _)),
               T':IncompleteArrayType, Cache::Set)
          => (Qs ==K getQualifiers(T')) andBool #areCompat(T, innerType(T'),  Cache)
     rule #areCompat(
               T:IncompleteArrayType,
               t(Qs'::Quals, Mods'::Set, arrayType(T'::Type, _)), Cache::Set)
          => (getQualifiers(T) ==K Qs') andBool #areCompat(innerType(T), T', Cache)
     rule #areCompat(
               t(Qs::Quals, Mods::Set, arrayType(T::Type, _)),
               T':VariableLengthArrayType, Cache::Set)
          => (Qs ==K getQualifiers(T')) andBool #areCompat(T, innerType(T'), Cache)
     rule #areCompat(
               T:VariableLengthArrayType,
               t(Qs'::Quals, Mods'::Set, arrayType(T'::Type, _)), Cache::Set)
          => (getQualifiers(T) ==K Qs') andBool #areCompat(innerType(T), T', Cache)
     // Two variable length arrays are compatible, but it's undefined if
     // they're used in an expression where they're required to be compat but
     // they have different sizes.
     rule #areCompat(T:VariableLengthArrayType, T':VariableLengthArrayType, Cache::Set)
          => (getQualifiers(T) ==K getQualifiers(T'))
               andBool sameAlignas(getModifiers(T), getModifiers(T'))
               andBool #areCompat(innerType(T), innerType(T'), Cache)
     rule #areCompat(
               T:IncompleteArrayType,
               T':VariableLengthArrayType, Cache::Set)
          => (getQualifiers(T) ==K getQualifiers(T'))
               andBool sameAlignas(getModifiers(T), getModifiers(T'))
               andBool #areCompat(innerType(T), innerType(T'), Cache)
     rule #areCompat(
               T:VariableLengthArrayType,
               T':IncompleteArrayType, Cache::Set)
          => (getQualifiers(T) ==K getQualifiers(T'))
               andBool sameAlignas(getModifiers(T), getModifiers(T'))
               andBool #areCompat(innerType(T), innerType(T'), Cache)
     rule #areCompat(
               T:IncompleteArrayType,
               T':IncompleteArrayType, Cache::Set)
          => (getQualifiers(T) ==K getQualifiers(T'))
               andBool sameAlignas(getModifiers(T), getModifiers(T'))
               andBool #areCompat(innerType(T), innerType(T'), Cache)

     rule #areCompat(
               t(Qs::Quals, Mods::Set, pointerType(T::Type)),
               t(Qs, Mods'::Set, pointerType(T'::Type)), Cache::Set)
          => sameAlignas(Mods, Mods') andBool #areCompat(T, T', Cache)

     // A function declaration with no arguments is compatible with a
     // declaration with any number of arguments, as long as they're all
     // promoted.

     // TODO(chathhorn): not sufficient?!? -- apparently we also need to look
     // at the argument types in a function definition w/no prototype?
     rule #areCompat(
               t(Qs::Quals, Mods::Set, functionType(T::UType, .List)),
               t(Qs, Mods'::Set, functionType(T'::UType, Args'::List)), Cache::Set)
          => sameAlignas(Mods, Mods') andBool #areCompat(type(T), type(T'), Cache)
          requires areArgPromoted(Args')
               andBool notBool (variadic in Args')
     rule #areCompat(
               t(Qs::Quals, Mods::Set, functionType(T::UType, Args::List)),
               t(Qs, Mods'::Set, functionType(T'::UType, .List)), Cache::Set)
          => sameAlignas(Mods, Mods') andBool #areCompat(type(T), type(T'), Cache)
          requires areArgPromoted(Args)
               andBool notBool (variadic in Args)
     rule #areCompat(
               t(Qs::Quals, Mods::Set, functionType(T::UType,  L::List)),
               t(Qs, Mods'::Set, functionType(T'::UType, L'::List)), Cache::Set)
          => sameAlignas(Mods, Mods') andBool #areCompat(type(T), type(T'), Cache)
               andBool #areParamsCompat(L, L', Cache)
          requires size(L) ==Int size(L')
     rule #areCompat(variadic, variadic, _) => true
     rule #areCompat(_:Type, _:Type, _) => false [owise]

     syntax Bool ::= #areParamsCompat(List, List, Set) [function]
     rule #areParamsCompat(
               ListItem(T:K) L::List,
               ListItem(T':K) L'::List, Cache::Set)
          => T ==K T' andBool #areParamsCompat(L, L', Cache)
          requires T ==K variadic orBool T' ==K variadic
     rule #areParamsCompat(
               ListItem(typedDeclaration(T::Type, _)) L::List,
               ListItem(typedDeclaration(T'::Type, _)) L'::List, Cache::Set)
          => #areCompat(stripQualifiers(T), stripQualifiers(T'), Cache)
               andBool #areParamsCompat(L, L', Cache)
     rule #areParamsCompat(
               ListItem(T:Type) L::List,
               ListItem(typedDeclaration(T'::Type, _)) L'::List, Cache::Set)
          => #areCompat(stripQualifiers(T), stripQualifiers(T'), Cache)
               andBool #areParamsCompat(L, L', Cache)
          requires T =/=K variadic
     rule #areParamsCompat(
               ListItem(typedDeclaration(T::Type, _)) L::List,
               ListItem(T':Type) L'::List, Cache::Set)
          => #areCompat(stripQualifiers(T), stripQualifiers(T'), Cache)
               andBool #areParamsCompat(L, L', Cache)
          requires T' =/=K variadic
     rule #areParamsCompat(
               ListItem(T:Type) L::List,
               ListItem(T':Type) L'::List, Cache::Set)
          => #areCompat(stripQualifiers(T), stripQualifiers(T'), Cache)
               andBool #areParamsCompat(L, L', Cache)
          requires T =/=K variadic andBool T' =/=K variadic
     rule #areParamsCompat(_, _, _) => true [owise]

     syntax Bool ::= #areCompatFields(List, List, Set) [function]
     rule #areCompatFields(ListItem(T:Type) L::List, ListItem(T':Type) L'::List, Cache::Set)
          => #areCompat(T, T', Cache) andBool #areCompatFields(L, L', Cache)
     rule #areCompatFields(
               ListItem(typedDeclaration(T::Type, X:CId)) L::List,
               ListItem(typedDeclaration(T'::Type, X)) L'::List, Cache::Set)
          => #areCompat(T, T', Cache) andBool #areCompatFields(L, L', Cache)
     rule #areCompatFields(.List, .List, _) => true
     rule #areCompatFields(_:List, _, _) => false [owise]

     // TODO(chathhorn): treating alignas like a qualifier for now. It's more
     // complicated than this, too, I think -- e.g., alignas on a definition
     // implies no alignas should be on any declaration.
     syntax Bool ::= sameAlignas(Set, Set) [function]
     rule sameAlignas(Mods:Set, Mods':Set)
          => getAlignasMod(Mods) ==Int getAlignasMod(Mods')

     rule getAlignas(T::Type) => getAlignasMod(getModifiers(T))
          requires hasAlignasMod(getModifiers(T))
     rule getAlignas(T::Type) => byteAlignofType(T)
          requires notBool hasAlignasMod(getModifiers(T))

     syntax Int ::= getAlignasMod(Set) [function]
     rule getAlignasMod(SetItem(alignas(N::Int)) _) => N
     rule getAlignasMod(_) => -1 [owise]

     rule compositeType(T::UType, T'::UType)
          => utype(compositeType(type(T), type(T')))

     // We can assume the types are compatible.
     rule compositeType(T::Type, T) => T
     rule compositeType(
               t(Qs::Quals, Mods::Set, T::SimpleType),
               t(Qs'::Quals, Mods'::Set, T::SimpleType))
          // The modifiers might include extra information besides just
          // specifiers, it's probably best to keep it all around for now.
          => t(Qs +Quals Qs', Mods Mods', T)
          requires isBasicType(type(T))
               orBool isStructOrUnionType(type(T))
               orBool isBitfieldType(type(T))

     // TODO(chathhorn): surely implementation defined, although I don't see
     // composite types for enums explicitly addressed in the standard.
     rule compositeType(
               t(Qs::Quals, Mods::Set, enumType(_)),
               t(Qs'::Quals, Mods'::Set, T::SimpleType))
          => t(Qs +Quals Qs', Mods Mods', T)
          requires T ==K cfg:enumAlias
     rule compositeType(
               t(Qs::Quals, Mods::Set, T::SimpleType),
               t(Qs'::Quals, Mods'::Set, enumType(_)))
          => t(Qs +Quals Qs', Mods Mods', T)
          requires T ==K cfg:enumAlias

     rule compositeType(
               t(Qs::Quals, Mods:Set, functionType(T::UType, P:List)),
               t(Qs'::Quals, Mods'::Set, functionType(T'::UType, P':List)))
          => compositeFunctionType(compositeType(T, T'), Qs +Quals Qs', Mods Mods', P, P', .List)

     rule compositeType(
               t(Qs::Quals, Mods::Set, pointerType(T:Type)),
               t(Qs'::Quals, Mods'::Set, pointerType(T':Type)))
          => t(Qs +Quals Qs', Mods Mods', pointerType(compositeType(T, T')))

     rule compositeType(
               t(Qs::Quals, Mods::Set, arrayType(T:Type, N:Int)),
               t(Qs'::Quals, Mods'::Set, arrayType(T':Type, N)))
          => t(Qs +Quals Qs', Mods Mods', arrayType(compositeType(T, T'), N))
     rule compositeType(
               t(Qs::Quals, Mods::Set, arrayType(T:Type, N:Int)),
               t(Qs'::Quals, Mods'::Set, incompleteArrayType(T':Type)))
          => t(Qs +Quals Qs', Mods Mods', arrayType(compositeType(T, T'), N))
     rule compositeType(
               t(Qs::Quals, Mods::Set, incompleteArrayType(T:Type)),
               t(Qs'::Quals, Mods'::Set, arrayType(T':Type, N:Int)))
          => t(Qs +Quals Qs', Mods Mods', arrayType(compositeType(T, T'), N))
     rule compositeType(
               t(Qs::Quals, Mods:Set, arrayType(T:Type, N:Int)),
               T':VariableLengthArrayType)
          => t(Qs +Quals getQualifiers(T'), Mods getModifiers(T'), arrayType(compositeType(T, innerType(T')), N))
     rule compositeType(
               T:VariableLengthArrayType,
               t(Qs'::Quals, Mods':Set, arrayType(T':Type, N:Int)))
          => t(getQualifiers(T) +Quals Qs', getModifiers(T) Mods', arrayType(compositeType(innerType(T), T'), N))
     rule compositeType(
               t(Qs::Quals, Mods:Set, variableLengthArrayType(T:Type, E:K)),
               t(Qs'::Quals, Mods':Set, variableLengthArrayType(T':Type, _)))
          => t(Qs +Quals Qs', Mods Mods', variableLengthArrayType(compositeType(T, T'), E))
     rule compositeType(
               t(Qs::Quals, Mods:Set, unspecifiedArrayType(T:Type)),
               t(Qs'::Quals, Mods':Set, variableLengthArrayType(T':Type, E:K)))
          => t(Qs +Quals Qs', Mods Mods', variableLengthArrayType(compositeType(T, T'), E))
     rule compositeType(
               t(Qs'::Quals, Mods':Set, variableLengthArrayType(T:Type, E:K)),
               t(Qs::Quals, Mods:Set, unspecifiedArrayType(T':Type)))
          => t(Qs +Quals Qs', Mods Mods', variableLengthArrayType(compositeType(T, T'), E))
     rule compositeType(
               t(Qs'::Quals, Mods':Set, unspecifiedArrayType(T:Type)),
               t(Qs::Quals, Mods:Set, unspecifiedArrayType(T':Type)))
          => t(Qs +Quals Qs', Mods Mods', unspecifiedArrayType(compositeType(T, T')))
     rule compositeType(
               t(Qs::Quals, Mods:Set, flexibleArrayType(T:Type)),
               t(Qs'::Quals, Mods':Set, flexibleArrayType(T':Type)))
          => t(Qs +Quals Qs', Mods Mods', flexibleArrayType(compositeType(T, T')))

     rule compositeType(
               t(Qs::Quals, Mods:Set, structType(S:StructId)),
               t(Qs'::Quals, Mods':Set, structType(S':StructId)))
          => t(Qs +Quals Qs', Mods Mods', structType(S:StructId))
          requires getFieldInfo(S') ==K #incomplete
     rule compositeType(
               t(Qs::Quals, Mods:Set, structType(S:StructId)),
               t(Qs'::Quals, Mods':Set, structType(S':StructId)))
          => t(Qs +Quals Qs', Mods Mods', structType(S':StructId))
          requires getFieldInfo(S) ==K #incomplete

     syntax KItem ::= compositeFunctionType(UType, Quals, Set, List, List, List)
          [function]
     rule compositeFunctionType(R::UType, Qs::Quals, Mods::Set, .List, .List, P'::List)
          => t(Qs, Mods, functionType(R, P'))
     rule compositeFunctionType(_, _, _, .List, (P::List => .List), (_ => P))
          requires P =/=K .List
     rule compositeFunctionType(_, _, _, (P::List => .List), .List, (_ => P))
          requires P =/=K .List
     rule compositeFunctionType(_, _, _,
               (ListItem(variadic) => .List),
               (ListItem(variadic) => .List),
               _:List (.List => ListItem(variadic)))
     rule compositeFunctionType(_, _, _,
               (ListItem(P:Type) => .List) _:List,
               (ListItem(P':Type) => .List) _:List,
               _:List (.List => ListItem(compositeType(P, P'))))
     rule compositeFunctionType(_, _, _,
               (ListItem(P:Type) => .List) _:List,
               (ListItem(typedDeclaration(P'::Type, X::CId)) => .List) _:List,
               _:List (.List => ListItem(typedDeclaration(compositeType(P, P'), X))))
     rule compositeFunctionType(_, _, _,
               (ListItem(typedDeclaration(P::Type, X::CId)) => .List) _:List,
               (ListItem(P':Type) => .List) _:List,
               _:List (.List => ListItem(typedDeclaration(compositeType(P, P'), X))))
     rule compositeFunctionType(_, _, _,
               (ListItem(typedDeclaration(P::Type, X:CId)) => .List) _:List,
               (ListItem(typedDeclaration(P'::Type, X)) => .List) _:List,
               _:List (.List => ListItem(typedDeclaration(compositeType(P, P'), X))))
endmodule

